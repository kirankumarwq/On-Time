{
    "sourceFile": "notion.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749486299683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749486299683,
            "name": "Commit-0",
            "content": "// Notion Clone: Modular, scalable, production-quality JS (MVC-inspired)\r\n(function() {\r\n  // --- Model ---\r\n  const STORAGE_KEY = 'notion-clone-data-v1';\r\n  let data = {\r\n    pages: [\r\n      {\r\n        id: 'page-1',\r\n        title: 'Welcome',\r\n        blocks: [\r\n          { id: 'b1', type: 'heading', content: 'Welcome to Notion Clone!' },\r\n          { id: 'b2', type: 'text', content: 'This is a Notion-style page. Try editing, adding, or dragging blocks.' },\r\n          { id: 'b3', type: 'checkbox', content: 'Try checkboxes' },\r\n          { id: 'b4', type: 'bullet', content: 'Bullet point example' }\r\n        ],\r\n        collapsed: false\r\n      }\r\n    ],\r\n    selectedPageId: 'page-1',\r\n    theme: 'light'\r\n  };\r\n  function save() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n  }\r\n  function load() {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    if (raw) {\r\n      try { data = JSON.parse(raw); } catch {}\r\n    }\r\n  }\r\n  load();\r\n\r\n  // --- View ---\r\n  const root = document.getElementById('notion-root');\r\n  const sidebarPages = document.getElementById('notion-sidebar-pages');\r\n  const addPageBtn = document.getElementById('notion-add-page');\r\n  const pageTitle = document.getElementById('notion-page-title');\r\n  const blocksContainer = document.getElementById('notion-blocks');\r\n  const themeBtn = document.getElementById('notion-toggle-theme');\r\n\r\n  function renderSidebar() {\r\n    sidebarPages.innerHTML = '';\r\n    data.pages.forEach(page => {\r\n      const div = document.createElement('div');\r\n      div.className = 'notion-sidebar-page' + (page.id === data.selectedPageId ? ' selected' : '');\r\n      div.textContent = page.title || 'Untitled';\r\n      div.onclick = () => {\r\n        data.selectedPageId = page.id;\r\n        save();\r\n        render();\r\n      };\r\n      sidebarPages.appendChild(div);\r\n    });\r\n  }\r\n\r\n  function renderBlocks() {\r\n    blocksContainer.innerHTML = '';\r\n    const page = data.pages.find(p => p.id === data.selectedPageId);\r\n    if (!page) return;\r\n    page.blocks.forEach((block, idx) => {\r\n      const div = document.createElement('div');\r\n      div.className = 'notion-block';\r\n      div.setAttribute('data-id', block.id);\r\n      div.setAttribute('contenteditable', true);\r\n      div.setAttribute('spellcheck', true);\r\n      div.setAttribute('tabindex', 0);\r\n      if (block.type === 'heading') {\r\n        div.classList.add('notion-heading');\r\n        div.innerHTML = block.content;\r\n      } else if (block.type === 'checkbox') {\r\n        div.innerHTML = `<input type=\"checkbox\" class=\"notion-checkbox\" ${block.checked ? 'checked' : ''}/> <span>${block.content}</span>`;\r\n      } else if (block.type === 'bullet') {\r\n        div.innerHTML = `<span class=\"notion-bullet\">•</span> <span>${block.content}</span>`;\r\n      } else {\r\n        div.innerHTML = block.content;\r\n      }\r\n      // Drag and drop\r\n      div.draggable = true;\r\n      div.ondragstart = e => {\r\n        div.classList.add('dragging');\r\n        e.dataTransfer.setData('text/plain', block.id);\r\n      };\r\n      div.ondragend = () => div.classList.remove('dragging');\r\n      div.ondragover = e => e.preventDefault();\r\n      div.ondrop = e => {\r\n        e.preventDefault();\r\n        const fromId = e.dataTransfer.getData('text/plain');\r\n        const toId = block.id;\r\n        if (fromId !== toId) {\r\n          const page = data.pages.find(p => p.id === data.selectedPageId);\r\n          const fromIdx = page.blocks.findIndex(b => b.id === fromId);\r\n          const toIdx = page.blocks.findIndex(b => b.id === toId);\r\n          const [moved] = page.blocks.splice(fromIdx, 1);\r\n          page.blocks.splice(toIdx, 0, moved);\r\n          save();\r\n          renderBlocks();\r\n        }\r\n      };\r\n      // Inline editing\r\n      div.oninput = () => {\r\n        if (block.type === 'checkbox') {\r\n          block.content = div.querySelector('span').textContent;\r\n        } else if (block.type === 'bullet') {\r\n          block.content = div.querySelector('span:last-child').textContent;\r\n        } else {\r\n          block.content = div.textContent;\r\n        }\r\n        save();\r\n      };\r\n      // Checkbox toggle\r\n      if (block.type === 'checkbox') {\r\n        div.querySelector('input').onchange = e => {\r\n          block.checked = e.target.checked;\r\n          save();\r\n        };\r\n      }\r\n      blocksContainer.appendChild(div);\r\n    });\r\n  }\r\n\r\n  function renderPage() {\r\n    const page = data.pages.find(p => p.id === data.selectedPageId);\r\n    if (!page) return;\r\n    pageTitle.value = page.title;\r\n    renderBlocks();\r\n  }\r\n\r\n  function render() {\r\n    renderSidebar();\r\n    renderPage();\r\n    root.setAttribute('data-theme', data.theme);\r\n  }\r\n\r\n  // --- Controller ---\r\n  addPageBtn.onclick = () => {\r\n    const id = 'page-' + Date.now();\r\n    data.pages.push({ id, title: 'Untitled', blocks: [], collapsed: false });\r\n    data.selectedPageId = id;\r\n    save();\r\n    render();\r\n  };\r\n  pageTitle.oninput = () => {\r\n    const page = data.pages.find(p => p.id === data.selectedPageId);\r\n    if (page) {\r\n      page.title = pageTitle.value;\r\n      save();\r\n      renderSidebar();\r\n    }\r\n  };\r\n  themeBtn.onclick = () => {\r\n    data.theme = data.theme === 'light' ? 'dark' : 'light';\r\n    save();\r\n    render();\r\n  };\r\n  // Add new block on Enter\r\n  blocksContainer.onkeydown = e => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      const page = data.pages.find(p => p.id === data.selectedPageId);\r\n      if (!page) return;\r\n      const sel = document.getSelection();\r\n      const blockDiv = sel.anchorNode && sel.anchorNode.parentElement.closest('.notion-block');\r\n      if (!blockDiv) return;\r\n      const blockId = blockDiv.getAttribute('data-id');\r\n      const idx = page.blocks.findIndex(b => b.id === blockId);\r\n      const newBlock = { id: 'b' + Date.now(), type: 'text', content: '' };\r\n      page.blocks.splice(idx + 1, 0, newBlock);\r\n      save();\r\n      renderBlocks();\r\n      // Focus new block\r\n      setTimeout(() => {\r\n        const newDiv = blocksContainer.querySelector(`[data-id='${newBlock.id}']`);\r\n        if (newDiv) newDiv.focus();\r\n      }, 10);\r\n    }\r\n  };\r\n  // Block type shortcuts (/, **, ##, [] etc.)\r\n  blocksContainer.oninput = e => {\r\n    const page = data.pages.find(p => p.id === data.selectedPageId);\r\n    if (!page) return;\r\n    const blockDivs = blocksContainer.querySelectorAll('.notion-block');\r\n    blockDivs.forEach((div, idx) => {\r\n      const block = page.blocks[idx];\r\n      if (!block) return;\r\n      let text = div.textContent.trim();\r\n      // Heading\r\n      if (text.startsWith('# ')) {\r\n        block.type = 'heading';\r\n        block.content = text.replace(/^# /, '');\r\n        div.classList.add('notion-heading');\r\n        div.innerHTML = block.content;\r\n      } else if (text.startsWith('- [ ] ')) {\r\n        block.type = 'checkbox';\r\n        block.content = text.replace(/^- \\[ \\] /, '');\r\n        block.checked = false;\r\n        div.innerHTML = `<input type=\"checkbox\" class=\"notion-checkbox\"/> <span>${block.content}</span>`;\r\n      } else if (text.startsWith('- [x] ')) {\r\n        block.type = 'checkbox';\r\n        block.content = text.replace(/^- \\[x\\] /, '');\r\n        block.checked = true;\r\n        div.innerHTML = `<input type=\"checkbox\" class=\"notion-checkbox\" checked/> <span>${block.content}</span>`;\r\n      } else if (text.startsWith('- ')) {\r\n        block.type = 'bullet';\r\n        block.content = text.replace(/^- /, '');\r\n        div.innerHTML = `<span class=\"notion-bullet\">•</span> <span>${block.content}</span>`;\r\n      } else {\r\n        block.type = 'text';\r\n        block.content = text;\r\n        div.classList.remove('notion-heading');\r\n      }\r\n      save();\r\n    });\r\n  };\r\n  // Show Notion UI and hide old app\r\n  window.showNotion = function() {\r\n    document.getElementById('notion-root').style.display = 'flex';\r\n    document.getElementById('landing-page').style.display = 'none';\r\n    document.getElementById('task-manager').style.display = 'none';\r\n  };\r\n  // Initial render\r\n  render();\r\n})();\r\n"
        }
    ]
}